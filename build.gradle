apply plugin: 'java'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

if (!hasProperty('mainClass')) {
    ext.mainClass = 'eu.mihosoft.vmf.tutorial01.Main'
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath group: 'eu.mihosoft.vmf', name: 'vmf', version: '0.1-SNAPSHOT'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
}

configurations{
    vmf {
        extendsFrom compile
    }
}

sourceSets {  
    main {
        java {
            srcDirs = ['build/vmf-src-gen', 'src/main/java']
        }
    }
    vmf {
        // vmf model sources
    }
} 

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.10'
    
    vmfCompile group: 'eu.mihosoft.vmf', name: 'vmf', version: '0.1-SNAPSHOT'
    compile group: 'eu.mihosoft.vmf', name: 'vmf-runtime', version: '0.1-SNAPSHOT'
    
    compile 'commons-jxpath:commons-jxpath:1.3'
}

task vmfGenModelSources(dependsOn: vmfClasses) {
    
    // execute the task
    doLast {
        def urls = []
        // add model dependencies
        for(File clsDir : sourceSets.vmf.output.classesDirs) {
            urls.add(new File(clsDir.toString())
                    .toURI().toURL())
        }
        
        eu.mihosoft.vmf.VMF.generate(new File("$buildDir/vmf-src-gen"),
            new URLClassLoader(urls as URL[], 
                eu.mihosoft.vmf.VMF.class.getClassLoader()),
            "eu.mihosoft.vmf.tutorial01.vmfmodel")
    }

}

tasks.withType(JavaCompile) {
    compileTask ->
    if(!compileTask.name.startsWith("compileVmf")) {
        compileTask.dependsOn vmfGenModelSources
    }
}

clean {
    doLast {
        new File("$buildDir/vmf-src-gen/").listFiles().each {
            f -> f.delete();
        }
    }
}

task run(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = mainClass;
}